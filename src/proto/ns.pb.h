// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ns.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ns_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ns_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ns_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ns_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ns_2eproto;
namespace ns {
class ARPStats;
class ARPStatsDefaultTypeInternal;
extern ARPStatsDefaultTypeInternal _ARPStats_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_ArpStatsEntry_DoNotUse;
class Response_ArpStatsEntry_DoNotUseDefaultTypeInternal;
extern Response_ArpStatsEntry_DoNotUseDefaultTypeInternal _Response_ArpStatsEntry_DoNotUse_default_instance_;
}  // namespace ns
PROTOBUF_NAMESPACE_OPEN
template<> ::ns::ARPStats* Arena::CreateMaybeMessage<::ns::ARPStats>(Arena*);
template<> ::ns::Request* Arena::CreateMaybeMessage<::ns::Request>(Arena*);
template<> ::ns::Response* Arena::CreateMaybeMessage<::ns::Response>(Arena*);
template<> ::ns::Response_ArpStatsEntry_DoNotUse* Arena::CreateMaybeMessage<::ns::Response_ArpStatsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ns {

// ===================================================================

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ns_2eproto);
    return ::descriptor_table_ns_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ns.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ns_2eproto;
};
// -------------------------------------------------------------------

class Response_ArpStatsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ArpStatsEntry_DoNotUse, 
    std::string, ::ns::ARPStats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ArpStatsEntry_DoNotUse, 
    std::string, ::ns::ARPStats,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Response_ArpStatsEntry_DoNotUse();
  Response_ArpStatsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_ArpStatsEntry_DoNotUse& other);
  static const Response_ArpStatsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_ArpStatsEntry_DoNotUse*>(&_Response_ArpStatsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "ns.Response.ArpStatsEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ns_2eproto);
    return ::descriptor_table_ns_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ns_2eproto);
    return ::descriptor_table_ns_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArpStatsFieldNumber = 5,
    kNumArpFieldNumber = 1,
    kNumIpv4FieldNumber = 2,
    kNumIpv6FieldNumber = 3,
    kNumMulticastFieldNumber = 4,
  };
  // map<string, .ns.ARPStats> arp_stats = 5;
  int arp_stats_size() const;
  private:
  int _internal_arp_stats_size() const;
  public:
  void clear_arp_stats();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >&
      _internal_arp_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >*
      _internal_mutable_arp_stats();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >&
      arp_stats() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >*
      mutable_arp_stats();

  // required uint32 num_arp = 1;
  bool has_num_arp() const;
  private:
  bool _internal_has_num_arp() const;
  public:
  void clear_num_arp();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_arp() const;
  void set_num_arp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_arp() const;
  void _internal_set_num_arp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 num_ipv4 = 2;
  bool has_num_ipv4() const;
  private:
  bool _internal_has_num_ipv4() const;
  public:
  void clear_num_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ipv4() const;
  void set_num_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ipv4() const;
  void _internal_set_num_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 num_ipv6 = 3;
  bool has_num_ipv6() const;
  private:
  bool _internal_has_num_ipv6() const;
  public:
  void clear_num_ipv6();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ipv6() const;
  void set_num_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ipv6() const;
  void _internal_set_num_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 num_multicast = 4;
  bool has_num_multicast() const;
  private:
  bool _internal_has_num_multicast() const;
  public:
  void clear_num_multicast();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_multicast() const;
  void set_num_multicast(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_multicast() const;
  void _internal_set_num_multicast(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ns.Response)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_ArpStatsEntry_DoNotUse,
      std::string, ::ns::ARPStats,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > arp_stats_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_arp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ipv4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ipv6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_multicast_;
  friend struct ::TableStruct_ns_2eproto;
};
// -------------------------------------------------------------------

class ARPStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns.ARPStats) */ {
 public:
  inline ARPStats() : ARPStats(nullptr) {};
  virtual ~ARPStats();

  ARPStats(const ARPStats& from);
  ARPStats(ARPStats&& from) noexcept
    : ARPStats() {
    *this = ::std::move(from);
  }

  inline ARPStats& operator=(const ARPStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ARPStats& operator=(ARPStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ARPStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ARPStats* internal_default_instance() {
    return reinterpret_cast<const ARPStats*>(
               &_ARPStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ARPStats& a, ARPStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ARPStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ARPStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ARPStats* New() const final {
    return CreateMaybeMessage<ARPStats>(nullptr);
  }

  ARPStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ARPStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ARPStats& from);
  void MergeFrom(const ARPStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ARPStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns.ARPStats";
  }
  protected:
  explicit ARPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ns_2eproto);
    return ::descriptor_table_ns_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumPktsFieldNumber = 1,
    kRateFieldNumber = 2,
  };
  // required uint32 num_pkts = 1;
  bool has_num_pkts() const;
  private:
  bool _internal_has_num_pkts() const;
  public:
  void clear_num_pkts();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pkts() const;
  void set_num_pkts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pkts() const;
  void _internal_set_num_pkts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 rate = 2;
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 rate() const;
  void set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rate() const;
  void _internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ns.ARPStats)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pkts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rate_;
  friend struct ::TableStruct_ns_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Response

// required uint32 num_arp = 1;
inline bool Response::_internal_has_num_arp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_num_arp() const {
  return _internal_has_num_arp();
}
inline void Response::clear_num_arp() {
  num_arp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_num_arp() const {
  return num_arp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::num_arp() const {
  // @@protoc_insertion_point(field_get:ns.Response.num_arp)
  return _internal_num_arp();
}
inline void Response::_internal_set_num_arp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_arp_ = value;
}
inline void Response::set_num_arp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_arp(value);
  // @@protoc_insertion_point(field_set:ns.Response.num_arp)
}

// required uint32 num_ipv4 = 2;
inline bool Response::_internal_has_num_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_num_ipv4() const {
  return _internal_has_num_ipv4();
}
inline void Response::clear_num_ipv4() {
  num_ipv4_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_num_ipv4() const {
  return num_ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::num_ipv4() const {
  // @@protoc_insertion_point(field_get:ns.Response.num_ipv4)
  return _internal_num_ipv4();
}
inline void Response::_internal_set_num_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_ipv4_ = value;
}
inline void Response::set_num_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ipv4(value);
  // @@protoc_insertion_point(field_set:ns.Response.num_ipv4)
}

// required uint32 num_ipv6 = 3;
inline bool Response::_internal_has_num_ipv6() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response::has_num_ipv6() const {
  return _internal_has_num_ipv6();
}
inline void Response::clear_num_ipv6() {
  num_ipv6_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_num_ipv6() const {
  return num_ipv6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::num_ipv6() const {
  // @@protoc_insertion_point(field_get:ns.Response.num_ipv6)
  return _internal_num_ipv6();
}
inline void Response::_internal_set_num_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_ipv6_ = value;
}
inline void Response::set_num_ipv6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ipv6(value);
  // @@protoc_insertion_point(field_set:ns.Response.num_ipv6)
}

// required uint32 num_multicast = 4;
inline bool Response::_internal_has_num_multicast() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Response::has_num_multicast() const {
  return _internal_has_num_multicast();
}
inline void Response::clear_num_multicast() {
  num_multicast_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::_internal_num_multicast() const {
  return num_multicast_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Response::num_multicast() const {
  // @@protoc_insertion_point(field_get:ns.Response.num_multicast)
  return _internal_num_multicast();
}
inline void Response::_internal_set_num_multicast(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_multicast_ = value;
}
inline void Response::set_num_multicast(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_multicast(value);
  // @@protoc_insertion_point(field_set:ns.Response.num_multicast)
}

// map<string, .ns.ARPStats> arp_stats = 5;
inline int Response::_internal_arp_stats_size() const {
  return arp_stats_.size();
}
inline int Response::arp_stats_size() const {
  return _internal_arp_stats_size();
}
inline void Response::clear_arp_stats() {
  arp_stats_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >&
Response::_internal_arp_stats() const {
  return arp_stats_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >&
Response::arp_stats() const {
  // @@protoc_insertion_point(field_map:ns.Response.arp_stats)
  return _internal_arp_stats();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >*
Response::_internal_mutable_arp_stats() {
  return arp_stats_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ns::ARPStats >*
Response::mutable_arp_stats() {
  // @@protoc_insertion_point(field_mutable_map:ns.Response.arp_stats)
  return _internal_mutable_arp_stats();
}

// -------------------------------------------------------------------

// ARPStats

// required uint32 num_pkts = 1;
inline bool ARPStats::_internal_has_num_pkts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ARPStats::has_num_pkts() const {
  return _internal_has_num_pkts();
}
inline void ARPStats::clear_num_pkts() {
  num_pkts_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ARPStats::_internal_num_pkts() const {
  return num_pkts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ARPStats::num_pkts() const {
  // @@protoc_insertion_point(field_get:ns.ARPStats.num_pkts)
  return _internal_num_pkts();
}
inline void ARPStats::_internal_set_num_pkts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_pkts_ = value;
}
inline void ARPStats::set_num_pkts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pkts(value);
  // @@protoc_insertion_point(field_set:ns.ARPStats.num_pkts)
}

// required uint32 rate = 2;
inline bool ARPStats::_internal_has_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ARPStats::has_rate() const {
  return _internal_has_rate();
}
inline void ARPStats::clear_rate() {
  rate_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ARPStats::_internal_rate() const {
  return rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ARPStats::rate() const {
  // @@protoc_insertion_point(field_get:ns.ARPStats.rate)
  return _internal_rate();
}
inline void ARPStats::_internal_set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rate_ = value;
}
inline void ARPStats::set_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:ns.ARPStats.rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ns_2eproto
